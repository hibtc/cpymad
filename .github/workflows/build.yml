name: build
on:
  push:
  pull_request:
  schedule:
    - cron: '45 14  *  *  1'

jobs:
  # Quickly check with flake8 without having to go through the whole build:
  flake8:
    name: "Fast flake8"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Check on lowest supported python version to catch syntax errors:
      - uses: actions/setup-python@v4
        with: { python-version: "3.7" }
      - run: pip install flake8
      - run: flake8

  build_linux:
    name: "Build: Linux (x64)"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        # - {base: manylinux1,     python: "cp{36,37,38,39}",         arch: x86_64}
        # - {base: manylinux2010,  python: "cp{36,37,38,39,310}",     arch: x86_64}
          - {base: manylinux2014,  python: "cp{36,37,38,39,310,311}", arch: x86_64}
        # - {base: manylinux_2_28, python: "cp{36,37,38,39,310,311}", arch: x86_64}
          - {base: musllinux_1_1,  python: "cp{36,37,38,39,310,311}", arch: x86_64}
    steps:
      - uses: actions/checkout@v3

      - run: git clone https://github.com/MethodicalAcceleratorDesign/MAD-X
          src/MAD-X -b "$(cat MADX_VERSION)" --depth 1

      - uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_ARCHS: x86_64
          CIBW_BUILD: ${{ matrix.python }}*-manylinux_x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.base }}
          CIBW_BEFORE_ALL: ".github/build/linux/madx.sh src/MAD-X"
          CIBW_BEFORE_BUILD: "pip install cython"
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"
          CIBW_ENVIRONMENT: MADXDIR=src/MAD-X/dist
          CIBW_TEST_REQUIRES: flake8 pytest pandas
          CIBW_TEST_COMMAND: |
            flake8 "{project}"
            pytest "{project}/test" -v

# build_linux_arm64:
#         - {base: manylinux2014,  python: "cp{36,37,38,39,310,311}", arch: aarch64}
#         - {base: musllinux_1_1,  python: "cp{36,37,38,39,310,311}", arch: aarch64}

  build_windows:
    name: "Build: Windows"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - uses: actions/checkout@v3
      - run: git clone https://github.com/MethodicalAcceleratorDesign/MAD-X
          src/MAD-X -b "$(cat MADX_VERSION)" --depth 1

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          path-type: inherit
          install: mingw-w64-ucrt-x86_64-gcc
                   mingw-w64-ucrt-x86_64-gcc-fortran
                   mingw-w64-ucrt-x86_64-cmake

      - run: echo "MSYSTEM=UCRT64" >> $GITHUB_ENV
      - run: echo -e "[build]\ncompiler=mingw32" > ~/pydistutils.cfg

      - uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_BEFORE_ALL: ".github/build/windows/madx.sh src/MAD-X"
          CIBW_BEFORE_BUILD: "pip install cython"
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"
          CIBW_ENVIRONMENT: MADXDIR=src/MAD-X/dist

  build_macos:
    name: "Build: MacOS"
    runs-on: macos-11
    strategy:
      matrix:
        arch:
          - x86_64
          - arm64
        python:
          - cp36-* cp37-* cp38-* cp39-* cp310-*

    steps:
      - uses: actions/checkout@v3

      - run: git clone https://github.com/MethodicalAcceleratorDesign/MAD-X
          src/MAD-X -b "$(cat MADX_VERSION)" --depth 1

      # Select matching Xcode, SDK, Deployment Target, see:
      # https://xcodereleases.com/
      # 11.3 was the oldest one I got to work so far:
      - run: sudo xcode-select -switch /Applications/Xcode_12.5.1.app
      - run: echo "MACOSX_DEPLOYMENT_TARGET=11.3" >> $GITHUB_ENV
      - run: echo "SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV

      - name: Setup gfortran (x86_64)
        if: matrix.arch == 'x86_64'
        run: |
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CPP=cpp-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
          echo "FC=gfortran-11" >> $GITHUB_ENV
          echo "LD=gcc-11" >> $GITHUB_ENV

      # Taken and simplified from:
      # https://github.com/MacPython/gfortran-install/blob/master/gfortran_utils.sh
      - name: Setup gfortran (arm64)
        if: matrix.arch == 'arm64'
        run: |
          name=gfortran-darwin-arm64-cross
          curl -L -O https://github.com/isuruf/gcc/releases/download/gcc-11.3.0-2/${name}.tar.gz
          sudo tar -f ${name}.tar.gz -C /opt -xzv
          rm ${name}.tar.gz

          FC=$(find /opt/${name}/bin -name "*-gfortran")
          LIBDIR=$(dirname $(find /opt/${name}/lib -name libgfortran.dylib))
          LDFLAGS="-L$LIBDIR -Wl,-rpath,$LIBDIR"

          # needed for cmake:
          echo "FC=$FC" >> $GITHUB_ENV
          # needed for setuptools:
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
          # needed for delocate:
          echo "LIBDIR=$LIBDIR" >> $GITHUB_ENV

      # ARCHFLAGS="-arch arm64"
      # _PYTHON_HOST_PLATFORM=macosx-11.0-arm64
      - uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_BEFORE_ALL: ".github/build/macos/madx.sh src/MAD-X ${{ matrix.arch }}"
          CIBW_BEFORE_BUILD: "pip install cython"
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"
          CIBW_ENVIRONMENT: >
            MADXDIR=src/MAD-X/dist
            BLAS=1
            LAPACK=1

          # Needed to point delocate to libgfortran.so, see:
          # https://github.com/pypa/cibuildwheel/issues/816
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_LIBRARY_PATH=$LIBDIR delocate-listdeps {wheel} &&
            DYLD_LIBRARY_PATH=$LIBDIR delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}
